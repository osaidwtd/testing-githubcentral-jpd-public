name: Docker Hello World

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  hello-world:
    runs-on: ubuntu-latest
    permissions:
      contents: read            # Necessary by actions/checkout
      actions: read             # using $GITHUB_OUTPUT
      id-token: write           # Necessary to create attestations
      attestations: write       # Necessary to push attestations to GH account

    env:
      OIDC_PROVIDER_NAME: swampup-2025/testing-githubcentral-jpd-public@github
      JF_URL: ${{ vars.JF_URL }}            # e.g: https://githubcentral.jfrog.io/
      JF_REGISTRY: ${{ vars.JF_REGISTRY }}  # e.g: githubcentral.jfrog.io/docker-dev
      JF_DOCKER_REPO: docker-dev
      IMAGE_NAME: hello-world
      IMAGE_TAG: ${{ github.run_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup JFrog CLI
        id: jfrog-setup
        uses: jfrog/setup-jfrog-cli@v4
        with:
          oidc-provider-name: ${{ env.OIDC_PROVIDER_NAME }}
      - name: Log in to JFrog Artifactory
        uses: docker/login-action@v3
        with:
          registry: ${{ env.JF_URL }}
          username: ${{ steps.jfrog-setup.outputs.oidc-user }}
          password: ${{ steps.jfrog-setup.outputs.oidc-token }}
      - name: Build and push Docker Image
        if: false
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.JF_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      - name: Build and push Docker Image with JFrog CLI
        id: build-and-push
        run: |
          jf docker build \
          --tag ${{ env.JF_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
          --metadata-file=metadata.json \
          --push .

#         jf rt build-docker-create\
#         example-project-docker-dev --image-file build-metadata --build-name ${{ vars.BUILD_NAME }} --build-number ${{ github.run_number }}
          cat metadata.json
          #send digest to output for provenance attestation
          digest=$(cat metadata.json | jq '.["containerimage.digest"]')
          echo "digest=$digest" | tr -d '"' >> $GITHUB_OUTPUT

#      - name: Create build-provenance attestation
#        id: attest
#        uses: actions/attest-build-provenance@v2
#        with:
#          subject-name: ${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_TAG }}/manifest.json
#          subject-digest: ${{ steps.build-and-push.outputs.digest }}

